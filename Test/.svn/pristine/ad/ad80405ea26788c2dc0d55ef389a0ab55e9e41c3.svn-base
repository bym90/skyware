{"version":3,"sources":["../../../src/@ionic-native/plugins/db-meter/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAE7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BG;AASH,IAAa,OAAO;IAAS,2BAAiB;IAA9C;;IAuCA,CAAC;IArCC;;;OAGG;IAKH,uBAAK,GAAL,cAA2B,MAAM,CAAC,CAAC,CAAC;IAEpC;;;OAGG;IAEH,sBAAI,GAAJ,cAAuB,MAAM,CAAC,CAAC,CAAC;IAEhC;;;OAGG;IAEH,6BAAW,GAAX,cAAkC,MAAM,CAAC,CAAC,CAAC;IAE3C;;;OAGG;IAEH,wBAAM,GAAN,cAAyB,MAAM,CAAC,CAAC,CAAC;IAQpC,cAAC;AAAD,CAvCA,AAuCC,CAvC4B,iBAAiB,GAuC7C;AANM,kBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,sBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AA5BA;IAJC,OAAO,CAAC;QACP,UAAU,EAAE,IAAI;QAChB,aAAa,EAAE,MAAM;KACtB,CAAC;;;oCACO,UAAU;oCAAiB;AAOpC;IADC,OAAO,EAAE;;;;mCACsB;AAOhC;IADC,OAAO,EAAE;;;;0CACiC;AAO3C;IADC,OAAO,EAAE;;;;qCACwB;AA/BvB,OAAO;IARnB,MAAM,CAAC;QACN,UAAU,EAAE,SAAS;QACrB,MAAM,EAAE,wBAAwB;QAChC,SAAS,EAAE,SAAS;QACpB,IAAI,EAAE,mDAAmD;QACzD,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;KAC9B,CAAC;GAEW,OAAO,CAuCnB;SAvCY,OAAO","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * @name DB Meter\n * @description This plugin defines a global DBMeter object, which permits to get the decibel values from the microphone.\n * @usage\n * ```typescript\n * import { DBMeter } from '@ionic-native/db-meter';\n *\n * constructor(private dbMeter: DBMeter) { }\n *\n * ...\n *\n *\n * // Start listening\n * let subscription = this.dbMeter.start().subscribe(\n *   data => console.log(data)\n * );\n *\n * // Check if we are listening\n * this.dbMeter.isListening().then(\n *   (isListening: boolean) => console.log(isListening)\n * );\n *\n * // Stop listening\n * subscription.unsubscribe();\n *\n * // Delete DBMeter instance from memory\n * this.dbMeter.delete().then(\n *   () => console.log('Deleted DB Meter instance'),\n *   error => console.log('Error occurred while deleting DB Meter instance')\n * );\n * ```\n */\n@Plugin({\n  pluginName: 'DBMeter',\n  plugin: 'cordova-plugin-dbmeter',\n  pluginRef: 'DBMeter',\n  repo: 'https://github.com/akofman/cordova-plugin-dbmeter',\n  platforms: ['Android', 'iOS']\n})\n\nexport class DBMeter extends IonicNativePlugin {\n\n  /**\n   * Starts listening\n   * @returns {Observable<any>} Returns an observable. Subscribe to start listening. Unsubscribe to stop listening.\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'stop'\n  })\n  start(): Observable<any> { return; }\n\n  /**\n   * Stops listening\n   * @hidden\n   */\n  @Cordova()\n  stop(): Promise<any> { return; }\n\n  /**\n   * Check if the DB Meter is listening\n   * @returns {Promise<boolean>} Returns a promise that resolves with a boolean that tells us whether the DB meter is listening\n   */\n  @Cordova()\n  isListening(): Promise<boolean> { return; }\n\n  /**\n   * Delete the DB Meter instance\n   * @returns {Promise<any>} Returns a promise that will resolve if the instance has been deleted, and rejects if errors occur.\n   */\n  @Cordova()\n  delete(): Promise<any> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}